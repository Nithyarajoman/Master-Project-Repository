[Task Description]
; The datatypes are given for each task to get petri net outputs
types = {"0":"image", "1":"image part", "2":"feature"}
datatypes_count = 12
libDir = config
; User can select the approach of using count alone by giving "count_only" and "repeat" for repeat+count in this field
; task_type = repeat 
task_type = count_only 
; The input and outputs are also considered as a task. The input has generate alone and output has require only
tasks_number = 7 
; From the config.ini file
flitsPerPacket = 32
bitWidth = 8

[ML Statistics]
; Output_size is used for repeat functionality to get the number of repetitions
output_size = {'model_input_1': [(None, 28, 28, 1)],
 'model_conv2d': (None, 14, 14, 32),
 'model_batch_normalization': (None, 14, 14, 32),
 'model_activation': (None, 14, 14, 32),
 'model_conv2d_1': (None, 7, 7, 64),
 'model_batch_normalization_1': (None, 7, 7, 64),
 'model_activation_1': (None, 7, 7, 64),
 'model_flatten': (None, 3136),
 'model_dropout': (None, 3136),
 'model_dense': (None, 10)}

non_zero_prob = {'model_input_1': 0.4867267219387755,
 'model_conv2d': 0.6379942602040817,
 'model_batch_normalization': 0.6379942602040817,
 'model_activation': 0.2993799326371174,
 'model_conv2d_1': 0.7920918367346939,
 'model_batch_normalization_1': 0.7920918367346939,
 'model_activation_1': 0.42753507653061223,
 'model_flatten': 0.42753507653061223,
 'model_dropout': 0.42753507653061223,
 'model_dense': 1.0}

output_in_bits = {'model_input_1': 25088,
 'model_conv2d': 200704,
 'model_batch_normalization': 200704,
 'model_activation': 200704,
 'model_conv2d_1': 100352,
 'model_batch_normalization_1': 100352,
 'model_activation_1': 100352,
 'model_flatten': 100352,
 'model_dropout': 100352,
 'model_dense': 320}

[Nodes]
; This is used for the mapping xml generation. A final output node has also to be added. 
; The Generate_to specifies the task numbers where the current task is mapped to, 
; Gen_Types specifies the type value that has to be used for the generates mentioned and 
; Split_percent specifies how much of the effective packets should be send to each tasks respectively.
nodes = {'model_input_1': {'Node':0, 'Generate_to': [1], 'Gen_Types': [0]},
         'model_conv2d': {'Node':3, 'Generate_to': [2], 'Gen_Types': [3],'Split_percent':[1.0]},
         'model_batch_normalization': {'Node':4, 'Generate_to': [3,5], 'Gen_Types': [10,11], 'Split_percent':[0.4,0.6]},
         'model_conv2d_1': {'Node':7, 'Generate_to': [4], 'Gen_Types': [8]},
         'model_batch_normalization_1': {'Node':8, 'Generate_to': [5,7], 'Gen_Types': [5,9],'Split_percent':[0.4,0.6]},
         'model_activation_1': {'Node':8, 'Generate_to': [6], 'Gen_Types': [2]},
         'model_flatten': {'Node':11, 'Generate_to': [7], 'Gen_Types': [2]},
         'model_dropout': {'Node':5, 'Generate_to': [8], 'Gen_Types': [2]},
         'model_dense': {'Node':2, 'Generate_to': [9], 'Gen_Types': [2]},
         'output': {'Node':15, 'Generate_to': None, 'Gen_Types': None}}



